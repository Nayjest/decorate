// Generated by CoffeeScript 1.3.3

/**
 * Javascript decorator.
 * Usage examples:
 * <code>
 * var decorator = require('path/to/libs/decorator');
 * decorator.decorateBefore(
 *     MyClass.prototype,
 *     'methodName',
 *     function(){
 *         console.log('methodName call!');
 *     }
 * );
 * </code>
 *
 * @author Vitaliy [Nayjest] Stepanenko <gmail@vitaliy.in>
*/


(function() {

  define([], function() {
    "use strict";

    var FN, decorate, glob, _after, _before, _decorate, _method, _methods;
    FN = Function;
    glob = FN('return this')();
    _before = function(target, decorator) {
      var fn;
      fn = function() {
        decorator.apply(this, arguments);
        return target.apply(this, arguments);
      };
      if (!target.decorators) {
        target.decorators = [];
      }
      target.decorators.push(decorator);
      fn.prototype = target.prototype;
      return fn;
    };
    _after = function(target, decorator) {
      var fn;
      fn = function() {
        var res;
        res = target.apply(this, arguments);
        decorator.apply(this, arguments);
        return res;
      };
      if (!target.decorators) {
        target.decorators = [];
      }
      target.decorators.push(decorator);
      fn.prototype = target.prototype;
      return fn;
    };
    _decorate = function(target, decorator, insertAfter) {
      if (insertAfter) {
        return _after(target, decorator);
      } else {
        return _before(target, decorator);
      }
    };
    _method = function(obj, methodName, decorator, insertAfter) {
      return obj[methodName] = _decorate(obj[methodName], decorator, insertAfter);
    };
    _methods = function(obj, decorator, insertAfter) {
      var fn, key;
      for (key in obj) {
        fn = obj[key];
        if ((fn instanceof Function) && obj.hasOwnProperty(key)) {
          _method(obj, key, decorator, insertAfter);
        }
      }
      return obj;
    };
    /**
     * Decorate function, decorator runs after function call.
     * Usage:
     *  decorateAfter(<Object targetObj>,<String methodName>,<Function decorator>)
     *  decorateAfter(<Function targetFunc>, <function decorator>)
     *  decorateAfter(<String funcName>, <function decorator>)
     *
     * @param Object|Function|String arg1
     * @param String|Function arg2
     * @param Function|undefined arg3
     * @return Function decorated function.
    */

    decorate = function(a1, a2, a3, a4) {
      switch (typeof a1) {
        case 'object':
          if (typeof a2 === 'string') {
            return _method(a1, a2, a3, a4);
          } else {
            return _methods(a1, a2, a3);
          }
          break;
        case 'function':
          return _decorate(a1, a2, a3);
        case 'string':
          return _method(glob, a1, a2, a3);
      }
    };
    decorate.after = function(a1, a2, a3) {
      if (typeof a1 === 'object') {
        return _method(a1, a2, a3, true);
      } else {
        return decorate(a1, a2, true);
      }
    };
    decorate.before = function(a1, a2, a3) {
      if (typeof a1 === 'object') {
        return _method(a1, a2, a3);
      } else {
        return decorate(a1, a2);
      }
    };
    decorate.on = function(eventName, handler) {
      return decorate.after(this, eventName, handler);
    };
    decorate.remove = function(arg1, arg2, arg3) {
      switch (typeof arg1) {
        case 'object':
          return arg1[arg2] = arg1[arg2].prototype.constructor;
        case 'function':
          return arg1.prototype.constructor;
        case 'string':
          return glob[arg1] = glob[arg1].prototype.constructor;
      }
    };
    return decorate;
  });

}).call(this);
